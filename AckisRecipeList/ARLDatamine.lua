--[[

************************************************************************

ARLDatamine.lua

In-game datamining functions for ARL

File date: 2009-06-08T16:52:00Z
File revision: 2049
Project revision: 2053
Project version: 1.0RC9

************************************************************************

Please see http://www.wowace.com/projects/arl/for more information.

License:
	Please see LICENSE.txt

This source code is released under All Rights Reserved.

************************************************************************

]]--


-------------------------------------------------------------------------------
-- AddOn namespace.
-------------------------------------------------------------------------------
local MODNAME			= "Ackis Recipe List"
local addon			= LibStub("AceAddon-3.0"):GetAddon(MODNAME)

local L				= LibStub("AceLocale-3.0"):GetLocale(MODNAME)


-------------------------------------------------------------------------------
-- Upvalues globals.
-------------------------------------------------------------------------------
local table, string = table, string

local tconcat, tinsert, tsort, twipe = table.concat, table.insert, table.sort, table.wipe
local strlower, strmatch = string.lower, string.match
local gsub = string.gsub
local tonumber = tonumber
local ipairs, pairs = ipairs, pairs

-------------------------------------------------------------------------------
-- Upvalued Blizzard API.
-------------------------------------------------------------------------------
local UnitName = UnitName
local UnitGUID = UnitGUID
local UnitExists = UnitExists
local UnitIsPlayer = UnitIsPlayer
local UnitIsEnemy = UnitIsEnemy
local GetNumTrainerServices = GetNumTrainerServices
local GetTrainerServiceInfo = GetTrainerServiceInfo
local IsTradeskillTrainer = IsTradeskillTrainer
local SetTrainerServiceTypeFilter = SetTrainerServiceTypeFilter
local GetTrainerServiceTypeFilter = GetTrainerServiceTypeFilter
local GetTrainerServiceSkillReq = GetTrainerServiceSkillReq
local GetMerchantNumItems = GetMerchantNumItems
local GetMerchantItemLink = GetMerchantItemLink
local GetMerchantItemInfo = GetMerchantItemInfo
local GetSpellInfo = GetSpellInfo

-- Table borrowed from Thaoky's Altoholic
-- Used with explicit permission.
local spellitem = {
		[2158] = 2406,
		[2163] = 2407,
		[2164] = 2408,
		[2169] = 2409,
		[2333] = 3396,
		[2335] = 2555,
		[2389] = 2598,
		[2403] = 2601,
		[2542] = 2697,
		[2543] = 728,
		[2545] = 2698,
		[2547] = 2699,
		[2548] = 2700,
		[2549] = 2701,
		[2667] = 2881,
		[2673] = 5578,
		[2795] = 2889,
		[3172] = 3393,
		[3174] = 3394,
		[3175] = 3395,
		[3188] = 6211,
		[3230] = 2553,
		[3295] = 2883,
		[3297] = 3608,
		[3321] = 3609,
		[3325] = 3610,
		[3330] = 2882,
		[3334] = 3611,
		[3336] = 3612,
		[3370] = 3678,
		[3371] = 3679,
		[3372] = 3680,
		[3373] = 3681,
		[3376] = 3682,
		[3377] = 3683,
		[3397] = 3734,
		[3398] = 3735,
		[3399] = 3736,
		[3400] = 3737,
		[3449] = 6068,
		[3450] = 3830,
		[3451] = 3831,
		[3453] = 3832,
		[3454] = 14634,
		[3492] = 12162,
		[3493] = 3866,
		[3494] = 10858,
		[3495] = 3867,
		[3496] = 12163,
		[3497] = 3868,
		[3498] = 12164,
		[3500] = 3869,
		[3503] = 6047,
		[3504] = 3870,
		[3505] = 3871,
		[3507] = 3872,
		[3511] = 3873,
		[3513] = 3874,
		[3515] = 3875,
		[3758] = 4292,
		[3762] = 4293,
		[3765] = 7360,
		[3767] = 4294,
		[3769] = 4296,
		[3771] = 4297,
		[3772] = 7613,
		[3773] = 4299,
		[3775] = 4298,
		[3777] = 4300,
		[3778] = 14635,
		[3779] = 4301,
		[3844] = 4346,
		[3847] = 4345,
		[3849] = 4347,
		[3851] = 4349,
		[3854] = 7114,
		[3856] = 4350,
		[3857] = 14630,
		[3858] = 4351,
		[3860] = 4352,
		[3862] = 4355,
		[3863] = 4353,
		[3864] = 4356,
		[3868] = 4348,
		[3869] = 14627,
		[3870] = 6401,
		[3872] = 4354,
		[3873] = 10728,
		[3928] = 4408,
		[3933] = 4409,
		[3939] = 13309,
		[3940] = 4410,
		[3944] = 4411,
		[3952] = 14639,
		[3954] = 4412,
		[3957] = 13308,
		[3959] = 4413,
		[3960] = 4414,
		[3966] = 4415,
		[3968] = 4416,
		[3969] = 13311,
		[3971] = 7742,
		[3972] = 4417,
		[3979] = 13310,
		[4094] = 4609,
		[4096] = 13287,
		[4097] = 13288,
		[4508] = 4597,
		[4942] = 4624,
		[5244] = 5083,
		[6412] = 5482,
		[6413] = 5483,
		[6414] = 5484,
		[6415] = 5485,
		[6416] = 5486,
		[6417] = 5487,
		[6418] = 5488,
		[6419] = 5489,
		[6501] = 5528,
		[6518] = 5543,
		[6617] = 5640,
		[6618] = 5643,
		[6624] = 5642,
		[6686] = 5771,
		[6688] = 5772,
		[6692] = 5773,
		[6693] = 5774,
		[6695] = 5775,
		[6702] = 5786,
		[6703] = 5787,
		[6704] = 5788,
		[6705] = 5789,
		[7133] = 5972,
		[7149] = 5973,
		[7153] = 5974,
		[7213] = 6039,
		[7221] = 6044,
		[7222] = 6045,
		[7224] = 6046,
		[7255] = 6053,
		[7256] = 6054,
		[7257] = 6055,
		[7258] = 6056,
		[7259] = 6057,
		[7443] = 6342,
		[7629] = 6271,
		[7630] = 6270,
		[7633] = 6272,
		[7639] = 6274,
		[7643] = 6275,
		[7751] = 6325,
		[7752] = 6326,
		[7753] = 6328,
		[7754] = 6329,
		[7755] = 6330,
		[7766] = 6344,
		[7776] = 6346,
		[7782] = 6347,
		[7786] = 6348,
		[7793] = 6349,
		[7827] = 6368,
		[7828] = 6369,
		[7859] = 6375,
		[7867] = 6377,
		[7892] = 6390,
		[7893] = 6391,
		[7929] = 16112,
		[7935] = 6454,
		[7953] = 6474,
		[7954] = 6475,
		[7955] = 6476,
		[8238] = 6661,
		[8240] = 6663,
		[8243] = 6672,
		[8322] = 6710,
		[8339] = 6716,
		[8367] = 6735,
		[8607] = 6892,
		[8780] = 7092,
		[8782] = 7091,
		[8784] = 7090,
		[8786] = 7089,
		[8789] = 7087,
		[8793] = 7084,
		[8795] = 7085,
		[8797] = 7086,
		[8802] = 7088,
		[9064] = 7288,
		[9070] = 7289,
		[9072] = 7290,
		[9146] = 7361,
		[9147] = 7362,
		[9148] = 7363,
		[9149] = 7364,
		[9195] = 7449,
		[9197] = 7450,
		[9202] = 7451,
		[9207] = 7452,
		[9208] = 7453,
		[9269] = 7560,
		[9273] = 7561,
		[9513] = 18160,
		[9811] = 7978,
		[9813] = 7979,
		[9814] = 7980,
		[9818] = 7981,
		[9820] = 7982,
		[9933] = 7975,
		[9937] = 7995,
		[9939] = 7976,
		[9945] = 7983,
		[9950] = 7984,
		[9952] = 7985,
		[9957] = 99999,
		[9964] = 7989,
		[9966] = 7991,
		[9970] = 7990,
		[9995] = 7992,
		[9997] = 8029,
		[10005] = 7993,
		[10009] = 8028,
		[10013] = 8030,
		[10490] = 8384,
		[10509] = 8385,
		[10516] = 8409,
		[10520] = 8386,
		[10525] = 8395,
		[10529] = 8403,
		[10531] = 8387,
		[10533] = 8397,
		[10542] = 8398,
		[10544] = 8404,
		[10546] = 8405,
		[10554] = 8399,
		[10560] = 8389,
		[10562] = 8390,
		[10564] = 8400,
		[10566] = 8406,
		[10568] = 8401,
		[10570] = 8402,
		[10572] = 8407,
		[10574] = 8408,
		[10840] = 16113,
		[11453] = 9293,
		[11454] = 10713,
		[11456] = 10644,
		[11458] = 9294,
		[11459] = 9303,
		[11464] = 9295,
		[11466] = 9296,
		[11468] = 9297,
		[11472] = 9298,
		[11473] = 9302,
		[11476] = 9301,
		[11477] = 9300,
		[11479] = 9304,
		[11480] = 9305,
		[11643] = 9367,
		[12047] = 10316,
		[12056] = 10300,
		[12059] = 10301,
		[12060] = 10302,
		[12064] = 10311,
		[12066] = 10312,
		[12075] = 10314,
		[12078] = 10315,
		[12080] = 10317,
		[12081] = 10318,
		[12084] = 10320,
		[12085] = 10321,
		[12086] = 10463,
		[12089] = 10323,
		[12091] = 10325,
		[12093] = 10326,
		[12259] = 10424,
		[12587] = 10601,
		[12597] = 10602,
		[12607] = 10603,
		[12614] = 10604,
		[12615] = 10605,
		[12616] = 10606,
		[12617] = 10607,
		[12620] = 10608,
		[12624] = 10609,
		[13380] = 11038,
		[13419] = 11039,
		[13464] = 11081,
		[13522] = 11098,
		[13536] = 11101,
		[13612] = 11150,
		[13617] = 11151,
		[13620] = 11152,
		[13646] = 11163,
		[13653] = 11164,
		[13655] = 11165,
		[13687] = 11167,
		[13689] = 11168,
		[13698] = 11166,
		[13817] = 11202,
		[13841] = 11203,
		[13846] = 11204,
		[13868] = 11205,
		[13882] = 11206,
		[13898] = 11207,
		[13915] = 11208,
		[13931] = 11223,
		[13933] = 11224,
		[13945] = 11225,
		[13947] = 11226,
		[15292] = 11610,
		[15293] = 11614,
		[15294] = 11611,
		[15295] = 11615,
		[15296] = 11612,
		[15596] = 11813,
		[15628] = 11828,
		[15633] = 11827,
		[15853] = 12227,
		[15855] = 12228,
		[15856] = 12229,
		[15861] = 12231,
		[15863] = 12232,
		[15865] = 12233,
		[15906] = 12239,
		[15910] = 12240,
		[15915] = 16111,
		[15933] = 16110,
		[15935] = 12226,
		[15973] = 12261,
		[16642] = 12682,
		[16643] = 12683,
		[16644] = 12684,
		[16645] = 12685,
		[16646] = 12687,
		[16647] = 12688,
		[16648] = 12689,
		[16649] = 12690,
		[16650] = 12691,
		[16651] = 12692,
		[16652] = 12693,
		[16653] = 12694,
		[16654] = 12695,
		[16655] = 12699,
		[16656] = 12697,
		[16657] = 12700,
		[16658] = 12701,
		[16659] = 12702,
		[16661] = 12703,
		[16662] = 12704,
		[16663] = 12705,
		[16664] = 12706,
		[16665] = 12707,
		[16667] = 12696,
		[16724] = 12711,
		[16725] = 12713,
		[16726] = 12714,
		[16728] = 12716,
		[16729] = 12717,
		[16730] = 12715,
		[16731] = 12718,
		[16732] = 12719,
		[16741] = 12720,
		[16742] = 12725,
		[16744] = 12726,
		[16745] = 12727,
		[16746] = 12728,
		[16969] = 12819,
		[16970] = 12821,
		[16971] = 12823,
		[16973] = 12824,
		[16978] = 12825,
		[16983] = 12827,
		[16984] = 12828,
		[16985] = 12830,
		[16988] = 12833,
		[16990] = 12834,
		[16991] = 12835,
		[16992] = 12836,
		[16993] = 12837,
		[16994] = 12838,
		[16995] = 12839,
		[17187] = 12958,
		[17552] = 13476,
		[17553] = 13477,
		[17554] = 13478,
		[17555] = 13479,
		[17556] = 13480,
		[17557] = 13481,
		[17559] = 13482,
		[17560] = 13483,
		[17561] = 13484,
		[17562] = 13485,
		[17563] = 13486,
		[17564] = 13487,
		[17565] = 13488,
		[17566] = 13489,
		[17570] = 13490,
		[17571] = 13491,
		[17572] = 13492,
		[17573] = 13493,
		[17574] = 13494,
		[17575] = 13495,
		[17576] = 13496,
		[17577] = 13497,
		[17578] = 13499,
		[17580] = 13501,
		[17632] = 13517,
		[17634] = 13518,
		[17635] = 13519,
		[17636] = 13520,
		[17637] = 13521,
		[17638] = 13522,
		[18238] = 13939,
		[18239] = 13940,
		[18240] = 13942,
		[18241] = 13941,
		[18242] = 13943,
		[18243] = 13945,
		[18244] = 13946,
		[18245] = 13947,
		[18246] = 13948,
		[18247] = 13949,
		[18403] = 14466,
		[18404] = 14467,
		[18405] = 14468,
		[18406] = 14469,
		[18407] = 14470,
		[18408] = 14471,
		[18409] = 14472,
		[18410] = 14473,
		[18411] = 14474,
		[18412] = 14476,
		[18413] = 14477,
		[18414] = 14478,
		[18415] = 14479,
		[18416] = 14480,
		[18417] = 14481,
		[18418] = 14482,
		[18419] = 14483,
		[18420] = 14484,
		[18421] = 14485,
		[18422] = 14486,
		[18423] = 14488,
		[18424] = 14489,
		[18434] = 14490,
		[18436] = 14493,
		[18437] = 14492,
		[18438] = 14491,
		[18439] = 14494,
		[18440] = 14497,
		[18441] = 14495,
		[18442] = 14496,
		[18444] = 14498,
		[18445] = 14499,
		[18446] = 14500,
		[18447] = 14501,
		[18448] = 14507,
		[18449] = 14504,
		[18450] = 14505,
		[18451] = 14506,
		[18452] = 14509,
		[18453] = 14508,
		[18454] = 14511,
		[18455] = 14510,
		[18456] = 14512,
		[18457] = 14513,
		[18458] = 14514,
		[18560] = 14526,
		[19048] = 15724,
		[19049] = 15725,
		[19050] = 15726,
		[19051] = 15727,
		[19052] = 15728,
		[19053] = 15729,
		[19054] = 15730,
		[19055] = 15731,
		[19059] = 15732,
		[19060] = 15733,
		[19061] = 15734,
		[19062] = 15735,
		[19063] = 15737,
		[19064] = 15738,
		[19065] = 15739,
		[19066] = 15740,
		[19067] = 15741,
		[19068] = 15742,
		[19070] = 15743,
		[19071] = 15744,
		[19072] = 15745,
		[19073] = 15746,
		[19074] = 15747,
		[19075] = 15748,
		[19076] = 15749,
		[19077] = 15751,
		[19078] = 15752,
		[19079] = 15753,
		[19080] = 20254,
		[19081] = 15755,
		[19082] = 15756,
		[19083] = 15757,
		[19084] = 15758,
		[19085] = 15759,
		[19086] = 15760,
		[19087] = 15761,
		[19088] = 15762,
		[19089] = 15763,
		[19090] = 15764,
		[19091] = 15765,
		[19092] = 15768,
		[19094] = 15770,
		[19095] = 15771,
		[19097] = 15772,
		[19098] = 15773,
		[19100] = 15774,
		[19101] = 15775,
		[19102] = 15776,
		[19103] = 15777,
		[19104] = 15779,
		[19107] = 15781,
		[19790] = 16041,
		[19791] = 16042,
		[19792] = 16043,
		[19793] = 16044,
		[19794] = 16045,
		[19795] = 16047,
		[19796] = 16048,
		[19799] = 16049,
		[19800] = 16051,
		[19814] = 16046,
		[19815] = 16050,
		[19819] = 16052,
		[19825] = 16053,
		[19830] = 16054,
		[19831] = 16055,
		[19833] = 16056,
		[20008] = 16214,
		[20009] = 16218,
		[20010] = 16246,
		[20011] = 16251,
		[20012] = 16219,
		[20013] = 16244,
		[20014] = 16216,
		[20015] = 16224,
		[20016] = 16222,
		[20017] = 16217,
		[20020] = 16215,
		[20023] = 16245,
		[20024] = 16220,
		[20025] = 16253,
		[20026] = 16221,
		[20028] = 16242,
		[20029] = 16223,
		[20030] = 16247,
		[20031] = 16250,
		[20032] = 16254,
		[20033] = 16248,
		[20034] = 16252,
		[20035] = 16255,
		[20036] = 16249,
		[20051] = 16243,
		[20051] = 16243,
		[20626] = 16767,
		[20848] = 17017,
		[20849] = 17018,
		[20853] = 17022,
		[20854] = 17023,
		[20855] = 17025,
		[20872] = 17049,
		[20873] = 17053,
		[20874] = 17051,
		[20876] = 17052,
		[20890] = 17059,
		[20897] = 17060,
		[20916] = 17062,
		[21143] = 17200,
		[21144] = 17201,
		[21161] = 18592,
		[21913] = 17706,
		[21923] = 17709,
		[21931] = 17725,
		[21940] = 17720,
		[21943] = 17722,
		[21945] = 17724,
		[22480] = 18046,
		[22711] = 18239,
		[22727] = 18252,
		[22732] = 18257,
		[22749] = 18259,
		[22750] = 18260,
		[22757] = 18264,
		[22759] = 18265,
		[22761] = 18267,
		[22793] = 18290,
		[22795] = 18292,
		[22797] = 18291,
		[22866] = 18414,
		[22867] = 18415,
		[22868] = 18416,
		[22869] = 18417,
		[22870] = 18418,
		[22902] = 18487,
		[22921] = 18514,
		[22922] = 18515,
		[22923] = 18516,
		[22926] = 18517,
		[22927] = 18518,
		[22928] = 18519,
		[23066] = 18647,
		[23067] = 18649,
		[23068] = 18648,
		[23069] = 18650,
		[23071] = 18651,
		[23077] = 18652,
		[23078] = 18653,
		[23079] = 18655,
		[23080] = 18656,
		[23081] = 18657,
		[23082] = 18658,
		[23096] = 18654,
		[23129] = 18661,
		[23190] = 18731,
		[23399] = 18949,
		[23507] = 19027,
		[23628] = 19202,
		[23629] = 19204,
		[23632] = 19203,
		[23633] = 19205,
		[23636] = 19206,
		[23637] = 19207,
		[23638] = 19208,
		[23639] = 19209,
		[23650] = 19210,
		[23652] = 19211,
		[23653] = 19212,
		[23662] = 19215,
		[23663] = 19218,
		[23664] = 19216,
		[23665] = 19217,
		[23666] = 19219,
		[23667] = 19220,
		[23703] = 19326,
		[23704] = 19327,
		[23705] = 19328,
		[23706] = 19329,
		[23707] = 19330,
		[23708] = 19331,
		[23709] = 19332,
		[23710] = 19333,
		[23787] = 19442,
		[23799] = 19444,
		[23800] = 19445,
		[23801] = 19446,
		[23802] = 19447,
		[23803] = 19448,
		[23804] = 19449,
		[24091] = 19764,
		[24092] = 19765,
		[24093] = 19766,
		[24121] = 19769,
		[24122] = 19770,
		[24123] = 19771,
		[24124] = 19772,
		[24125] = 19773,
		[24136] = 19776,
		[24137] = 19777,
		[24138] = 19778,
		[24139] = 19779,
		[24140] = 19780,
		[24141] = 19781,
		[24356] = 20000,
		[24357] = 20001,
		[24365] = 20011,
		[24366] = 20012,
		[24367] = 20013,
		[24368] = 20014,
		[24399] = 20040,
		[24418] = 20075,
		[24703] = 20382,
		[24846] = 20506,
		[24847] = 20507,
		[24848] = 20508,
		[24849] = 20509,
		[24850] = 20510,
		[24851] = 20511,
		[24901] = 20546,
		[24902] = 20548,
		[24903] = 20547,
		[24912] = 20553,
		[24913] = 20555,
		[24914] = 20554,
		[24940] = 20576,
		[25072] = 33153,
		[25073] = 20727,
		[25074] = 20728,
		[25078] = 20729,
		[25079] = 20730,
		[25080] = 33152,
		[25081] = 20732,
		[25082] = 20733,
		[25083] = 33149,
		[25084] = 33150,
		[25086] = 33148,
		[25124] = 20758,
		[25125] = 20752,
		[25125] = 20752,
		[25126] = 20753,
		[25127] = 20754,
		[25127] = 20754,
		[25128] = 20755,
		[25128] = 20755,
		[25129] = 20756,
		[25129] = 20756,
		[25130] = 20757,
		[25130] = 20757,
		[25146] = 20761,
		[25320] = 20856,
		[25323] = 20855,
		[25339] = 20854,
		[25610] = 20970,
		[25612] = 20971,
		[25617] = 20973,
		[25618] = 20974,
		[25619] = 20975,
		[25622] = 20976,
		[25659] = 21025,
		[25704] = 21099,
		[25954] = 21219,
		[26085] = 21358,
		[26087] = 21371,
		[26277] = 21547,
		[26279] = 21548,
		[26403] = 44916,
		[26407] = 44917,
		[26416] = 21724,
		[26417] = 21725,
		[26418] = 21726,
		[26420] = 21727,
		[26421] = 21728,
		[26422] = 21729,
		[26423] = 21730,
		[26424] = 21731,
		[26425] = 21732,
		[26426] = 21733,
		[26427] = 21734,
		[26428] = 21735,
		[26442] = 44919,
		[26443] = 44918,
		[26747] = 21892,
		[26749] = 21893,
		[26750] = 21894,
		[26751] = 21895,
		[26752] = 21908,
		[26753] = 21909,
		[26754] = 21910,
		[26755] = 21911,
		[26756] = 21912,
		[26757] = 21914,
		[26758] = 21913,
		[26759] = 21915,
		[26760] = 21916,
		[26761] = 21918,
		[26762] = 21917,
		[26763] = 21919,
		[26773] = 21896,
		[26774] = 21897,
		[26775] = 21898,
		[26776] = 21899,
		[26777] = 21900,
		[26778] = 21901,
		[26779] = 21902,
		[26780] = 21903,
		[26781] = 21904,
		[26782] = 21905,
		[26783] = 21906,
		[26784] = 21907,
		[26873] = 21940,
		[26875] = 21941,
		[26878] = 21942,
		[26881] = 21943,
		[26882] = 21944,
		[26887] = 21945,
		[26896] = 21947,
		[26897] = 21948,
		[26900] = 21949,
		[26906] = 21952,
		[26909] = 21953,
		[26910] = 21954,
		[26912] = 21955,
		[26914] = 21956,
		[26915] = 21957,
		[27032] = 21992,
		[27033] = 21993,
		[27585] = 22209,
		[27586] = 22219,
		[27587] = 22222,
		[27588] = 22214,
		[27589] = 22220,
		[27590] = 22221,
		[27658] = 22307,
		[27659] = 22308,
		[27660] = 22309,
		[27724] = 22310,
		[27725] = 22312,
		[27829] = 22388,
		[27830] = 22390,
		[27832] = 22389,
		[27837] = 22392,
		[27906] = 22530,
		[27911] = 22531,
		[27911] = 24000,
		[27913] = 22532,
		[27914] = 22533,
		[27917] = 22534,
		[27920] = 22535,
		[27924] = 22536,
		[27926] = 22537,
		[27927] = 22538,
		[27945] = 22539,
		[27946] = 22540,
		[27947] = 22541,
		[27948] = 35298,
		[27948] = 22542,
		[27950] = 22543,
		[27951] = 22544,
		[27954] = 22545,
		[27960] = 22547,
		[27960] = 24003,
		[27962] = 22548,
		[27967] = 22552,
		[27968] = 22551,
		[27971] = 22554,
		[27972] = 22553,
		[27975] = 22555,
		[27977] = 22556,
		[27981] = 22560,
		[27982] = 22561,
		[27984] = 22559,
		[28003] = 22558,
		[28004] = 22557,
		[28016] = 22562,
		[28019] = 22563,
		[28022] = 22565,
		[28210] = 22683,
		[28267] = 22647,
		[28461] = 22766,
		[28462] = 22767,
		[28463] = 22768,
		[28472] = 22771,
		[28473] = 22770,
		[28474] = 22769,
		[28480] = 22774,
		[28481] = 22773,
		[28482] = 22772,
		[28543] = 22900,
		[28546] = 22901,
		[28549] = 22902,
		[28550] = 22903,
		[28552] = 22904,
		[28553] = 22905,
		[28554] = 22906,
		[28555] = 22907,
		[28556] = 22908,
		[28557] = 22909,
		[28558] = 22910,
		[28562] = 22911,
		[28563] = 22912,
		[28564] = 22913,
		[28565] = 22914,
		[28566] = 22915,
		[28567] = 22916,
		[28568] = 30443,
		[28569] = 22918,
		[28570] = 22919,
		[28571] = 22920,
		[28572] = 22921,
		[28573] = 22922,
		[28575] = 22923,
		[28576] = 22924,
		[28577] = 22925,
		[28578] = 22926,
		[28579] = 22927,
		[28903] = 23130,
		[28905] = 23131,
		[28906] = 23133,
		[28907] = 23134,
		[28910] = 23135,
		[28912] = 23136,
		[28914] = 23137,
		[28915] = 23138,
		[28916] = 23140,
		[28917] = 23141,
		[28918] = 23142,
		[28924] = 23143,
		[28925] = 23144,
		[28927] = 23145,
		[28933] = 23146,
		[28936] = 23147,
		[28938] = 23148,
		[28944] = 23149,
		[28947] = 23150,
		[28948] = 23151,
		[28950] = 23152,
		[28953] = 23153,
		[28955] = 23154,
		[28957] = 23155,
		[29566] = 23590,
		[29568] = 23591,
		[29569] = 23592,
		[29571] = 23593,
		[29603] = 23594,
		[29605] = 23595,
		[29606] = 23596,
		[29608] = 23597,
		[29610] = 23599,
		[29611] = 23598,
		[29613] = 23600,
		[29614] = 23601,
		[29615] = 23602,
		[29616] = 23603,
		[29617] = 23604,
		[29619] = 23605,
		[29620] = 23606,
		[29621] = 23607,
		[29622] = 23621,
		[29628] = 23608,
		[29629] = 23609,
		[29630] = 23610,
		[29642] = 23611,
		[29643] = 23612,
		[29645] = 23613,
		[29649] = 23617,
		[29656] = 23618,
		[29657] = 24002,
		[29658] = 23620,
		[29662] = 23622,
		[29663] = 23623,
		[29664] = 23624,
		[29668] = 23625,
		[29669] = 23626,
		[29671] = 23627,
		[29672] = 23628,
		[29688] = 23574,
		[29692] = 23629,
		[29693] = 23630,
		[29694] = 23631,
		[29695] = 23632,
		[29696] = 23633,
		[29697] = 23634,
		[29698] = 23635,
		[29699] = 23636,
		[29700] = 23637,
		[29728] = 23638,
		[29729] = 23639,
		[30313] = 23799,
		[30314] = 23800,
		[30315] = 23802,
		[30316] = 23803,
		[30317] = 23804,
		[30318] = 23805,
		[30325] = 23806,
		[30329] = 23807,
		[30332] = 23808,
		[30334] = 23809,
		[30337] = 23810,
		[30341] = 23811,
		[30344] = 23814,
		[30347] = 23815,
		[30348] = 23816,
		[30547] = 23874,
		[30548] = 23888,
		[30551] = 23883,
		[30552] = 23884,
		[30556] = 23887,
		[31053] = 24158,
		[31054] = 24159,
		[31055] = 24160,
		[31056] = 24161,
		[31057] = 24162,
		[31058] = 24163,
		[31060] = 24164,
		[31061] = 24165,
		[31062] = 24174,
		[31063] = 24175,
		[31064] = 24176,
		[31065] = 24177,
		[31066] = 24178,
		[31067] = 24166,
		[31068] = 24167,
		[31070] = 24168,
		[31071] = 24169,
		[31072] = 24170,
		[31076] = 24171,
		[31077] = 24172,
		[31078] = 24173,
		[31079] = 24179,
		[31080] = 24180,
		[31081] = 24181,
		[31082] = 24182,
		[31083] = 24183,
		[31084] = 24193,
		[31085] = 24194,
		[31087] = 24195,
		[31088] = 24196,
		[31089] = 24192,
		[31090] = 24197,
		[31091] = 24198,
		[31092] = 24199,
		[31094] = 24201,
		[31095] = 24202,
		[31096] = 24203,
		[31097] = 24204,
		[31098] = 24205,
		[31099] = 24206,
		[31100] = 24207,
		[31101] = 24208,
		[31102] = 24209,
		[31103] = 24210,
		[31104] = 24211,
		[31105] = 24212,
		[31106] = 24213,
		[31107] = 24214,
		[31108] = 24215,
		[31109] = 24216,
		[31110] = 24217,
		[31111] = 24218,
		[31112] = 24219,
		[31113] = 24220,
		[31149] = 24200,
		[31373] = 24316,
		[31430] = 24292,
		[31431] = 24293,
		[31432] = 24294,
		[31433] = 24295,
		[31434] = 24296,
		[31435] = 24297,
		[31437] = 24298,
		[31438] = 24299,
		[31440] = 24300,
		[31441] = 24301,
		[31442] = 24302,
		[31443] = 24303,
		[31444] = 24304,
		[31448] = 24305,
		[31449] = 24306,
		[31450] = 24307,
		[31451] = 24308,
		[31452] = 24309,
		[31453] = 24310,
		[31454] = 24311,
		[31455] = 24312,
		[31456] = 24313,
		[31459] = 24314,
		[32285] = 25526,
		[32455] = 25720,
		[32457] = 25721,
		[32458] = 25722,
		[32461] = 25725,
		[32482] = 25726,
		[32485] = 25728,
		[32487] = 25729,
		[32488] = 25731,
		[32489] = 25730,
		[32490] = 25732,
		[32493] = 25733,
		[32494] = 25734,
		[32495] = 25735,
		[32496] = 25736,
		[32497] = 25737,
		[32498] = 25738,
		[32499] = 25739,
		[32500] = 25740,
		[32501] = 25741,
		[32502] = 25742,
		[32503] = 25743,
		[32656] = 25846,
		[32657] = 25847,
		[32665] = 25848,
		[32667] = 25849,
		[32765] = 25869,
		[32766] = 29232,
		[32814] = 25887,
		[32866] = 25902,
		[32867] = 25903,
		[32868] = 25905,
		[32869] = 25906,
		[32870] = 25904,
		[32871] = 25907,
		[32872] = 25909,
		[32873] = 25908,
		[32874] = 25910,
		[33276] = 27685,
		[33277] = 27686,
		[33278] = 27687,
		[33279] = 27684,
		[33284] = 27688,
		[33285] = 27689,
		[33286] = 27690,
		[33287] = 27691,
		[33288] = 27692,
		[33289] = 27693,
		[33290] = 27694,
		[33291] = 27695,
		[33292] = 27696,
		[33293] = 27697,
		[33294] = 27698,
		[33295] = 27699,
		[33296] = 27700,
		[33992] = 28270,
		[33994] = 28271,
		[33997] = 28272,
		[33999] = 28273,
		[34003] = 28274,
		[34005] = 28276,
		[34006] = 28277,
		[34007] = 35299,
		[34007] = 28279,
		[34008] = 28280,
		[34008] = 35297,
		[34009] = 28282,
		[34010] = 28281,
		[34069] = 28291,
		[34590] = 28596,
		[34608] = 28632,
		[35520] = 29669,
		[35521] = 29672,
		[35522] = 29673,
		[35523] = 29674,
		[35524] = 29675,
		[35525] = 29677,
		[35526] = 29682,
		[35527] = 29684,
		[35528] = 29691,
		[35529] = 29689,
		[35530] = 29664,
		[35531] = 29693,
		[35532] = 29698,
		[35533] = 29700,
		[35534] = 29701,
		[35535] = 29702,
		[35536] = 29703,
		[35537] = 29704,
		[35538] = 29713,
		[35539] = 34174,
		[35543] = 29717,
		[35544] = 34172,
		[35549] = 29719,
		[35554] = 29722,
		[35555] = 29720,
		[35557] = 29721,
		[35558] = 29723,
		[35559] = 29724,
		[35560] = 29725,
		[35561] = 29726,
		[35562] = 29727,
		[35563] = 29728,
		[35564] = 29729,
		[35567] = 29730,
		[35568] = 29731,
		[35572] = 29732,
		[35573] = 29733,
		[35574] = 29734,
		[36210] = 30156,
		[36315] = 30280,
		[36316] = 30281,
		[36317] = 30282,
		[36318] = 30283,
		[36349] = 30301,
		[36351] = 30302,
		[36352] = 30303,
		[36353] = 30304,
		[36355] = 30305,
		[36357] = 30306,
		[36358] = 30307,
		[36359] = 30308,
		[36389] = 30321,
		[36390] = 30322,
		[36391] = 30323,
		[36392] = 30324,
		[36686] = 30483,
		[37855] = 30826,
		[37873] = 30833,
		[37882] = 30842,
		[37883] = 30843,
		[37884] = 30844,
		[38473] = 31390,
		[38475] = 31391,
		[38476] = 31392,
		[38477] = 31393,
		[38478] = 31394,
		[38479] = 31395,
		[38503] = 31401,
		[38504] = 31402,
		[38867] = 31675,
		[38868] = 31674,
		[38960] = 31680,
		[38961] = 31682,
		[38962] = 31681,
		[39451] = 31870,
		[39452] = 31875,
		[39455] = 31871,
		[39458] = 31872,
		[39462] = 31877,
		[39463] = 31876,
		[39466] = 31873,
		[39467] = 31874,
		[39470] = 31878,
		[39471] = 31879,
		[39637] = 32070,
		[39639] = 32071,
		[39705] = 32274,
		[39706] = 32277,
		[39710] = 32281,
		[39711] = 32282,
		[39712] = 32283,
		[39713] = 32284,
		[39714] = 32285,
		[39715] = 32286,
		[39716] = 32287,
		[39717] = 32288,
		[39718] = 32289,
		[39719] = 32290,
		[39720] = 32291,
		[39721] = 32292,
		[39722] = 32293,
		[39723] = 32294,
		[39724] = 32295,
		[39725] = 32296,
		[39727] = 32297,
		[39728] = 32298,
		[39729] = 32299,
		[39730] = 32300,
		[39731] = 32301,
		[39732] = 32302,
		[39733] = 32303,
		[39734] = 32304,
		[39735] = 32305,
		[39736] = 32306,
		[39737] = 32307,
		[39738] = 32308,
		[39739] = 32309,
		[39740] = 32310,
		[39741] = 32311,
		[39742] = 32312,
		[39895] = 32381,
		[39961] = 32412,
		[39963] = 32411,
		[39997] = 32429,
		[40001] = 32431,
		[40002] = 32429,
		[40003] = 32433,
		[40004] = 32434,
		[40005] = 32429,
		[40006] = 32436,
		[40020] = 32437,
		[40021] = 32438,
		[40023] = 32439,
		[40024] = 32440,
		[40033] = 32442,
		[40034] = 32442,
		[40035] = 32443,
		[40036] = 32444,
		[40060] = 32447,
		[41132] = 32736,
		[41133] = 32737,
		[41134] = 32738,
		[41135] = 32739,
		[41156] = 32744,
		[41157] = 32745,
		[41158] = 32746,
		[41160] = 32747,
		[41161] = 32748,
		[41162] = 32749,
		[41163] = 32750,
		[41164] = 32751,
		[41205] = 32754,
		[41206] = 32755,
		[41207] = 32752,
		[41208] = 32753,
		[42546] = 33124,
		[42558] = 33305,
		[42588] = 33155,
		[42589] = 33156,
		[42590] = 33157,
		[42591] = 33158,
		[42592] = 33159,
		[42593] = 392,
		[42615] = 1655,
		[42620] = 33165,
		[42662] = 33174,
		[42688] = 33186,
		[42731] = 33205,
		[42736] = 33209,
		[42974] = 33307,
		[43493] = 33783,
		[43549] = 33792,
		[43676] = 33804,
		[43707] = 33870,
		[43758] = 33871,
		[43761] = 33869,
		[43765] = 33873,
		[43772] = 33875,
		[43779] = 33925,
		[43846] = 33954,
		[44359] = 34200,
		[44391] = 34114,
		[44483] = 37332,
		[44494] = 37333,
		[44524] = 37344,
		[44556] = 37331,
		[44575] = 44484,
		[44576] = 44494,
		[44588] = 37340,
		[44590] = 37334,
		[44591] = 37347,
		[44595] = 44473,
		[44596] = 37330,
		[44621] = 37339,
		[44625] = 44485,
		[44631] = 37349,
		[44768] = 34201,
		[44794] = 34689,
		[44950] = 34261,
		[44953] = 34262,
		[44958] = 34319,
		[45022] = 34413,
		[45117] = 34491,
		[45695] = 34834,
		[45765] = 34872,
		[45765] = 34872,
		[46106] = 35191,
		[46107] = 35187,
		[46108] = 35189,
		[46109] = 35190,
		[46110] = 35192,
		[46111] = 35186,
		[46112] = 35193,
		[46113] = 35194,
		[46114] = 35195,
		[46115] = 35196,
		[46116] = 35197,
		[46122] = 35198,
		[46123] = 35199,
		[46124] = 35200,
		[46125] = 35201,
		[46126] = 35205,
		[46127] = 35203,
		[46128] = 35204,
		[46129] = 35205,
		[46130] = 35206,
		[46131] = 35207,
		[46132] = 35212,
		[46133] = 35213,
		[46134] = 35214,
		[46135] = 35215,
		[46136] = 35216,
		[46137] = 35217,
		[46138] = 35218,
		[46139] = 35219,
		[46140] = 35208,
		[46141] = 35209,
		[46142] = 35210,
		[46144] = 35211,
		[46353] = 35273,
		[46403] = 35322,
		[46404] = 35323,
		[46405] = 35325,
		[46578] = 35498,
		[46594] = 35550,
		[46594] = 35500,
		[46597] = 35502,
		[46601] = 35505,
		[46684] = 35564,
		[46688] = 35566,
		[46697] = 35582,
		[46775] = 35696,
		[46776] = 35696,
		[46777] = 35697,
		[46778] = 35698,
		[46779] = 35699,
		[46803] = 35708,
		[47046] = 35752,
		[47048] = 35753,
		[47049] = 35754,
		[47050] = 35755,
		[47051] = 35756,
		[47053] = 35769,
		[47054] = 35766,
		[47055] = 35767,
		[47056] = 35768,
		[47672] = 44471,
		[47898] = 44472,
		[47899] = 44488,
		[47901] = 44491,
		[52733] = 32430,
		[53936] = 44564,
		[53937] = 44566,
		[53938] = 44568,
		[53939] = 44565,
		[53942] = 44567,
		[59619] = 44496,
		[59621] = 44492,
		[59625] = 44495,
		[60691] = 44483,
		[60692] = 44489,
		[60707] = 44486,
		[60714] = 44487,
		[60763] = 44490,
		[60767] = 44498,
		[62256] = 44944,
	}
	
local function LoadRecipe()

	local recipelist = addon:GetRecipeTable()

	if (not recipelist) then
		if (addon.db.profile.autoloaddb) then
			local dbloaded
			dbloaded, recipelist = addon:InitRecipeData()

			if (not dbloaded) then return end

			addon:AddRecipeData(GetSpellInfo(51304))
			addon:AddRecipeData(GetSpellInfo(51300))
			addon:AddRecipeData(GetSpellInfo(51296))
			addon:AddRecipeData(GetSpellInfo(51313))
			addon:AddRecipeData(GetSpellInfo(51306))
			addon:AddRecipeData(GetSpellInfo(45542))
			addon:AddRecipeData(GetSpellInfo(51302))
			addon:AddRecipeData(GetSpellInfo(32606))
			addon:AddRecipeData(GetSpellInfo(51309))
			addon:AddRecipeData(GetSpellInfo(51311))
			addon:AddRecipeData(GetSpellInfo(45363))
			addon:AddRecipeData(GetSpellInfo(53428))
		else
			addon:Print(L["DATAMINER_NODB_ERROR"])
			return
		end
	else
		-- Recipe DB exists, we just need to populate it now
		if (addon.db.profile.autoloaddb) then
			addon:AddRecipeData(GetSpellInfo(51304))
			addon:AddRecipeData(GetSpellInfo(51300))
			addon:AddRecipeData(GetSpellInfo(51296))
			addon:AddRecipeData(GetSpellInfo(51313))
			addon:AddRecipeData(GetSpellInfo(51306))
			addon:AddRecipeData(GetSpellInfo(45542))
			addon:AddRecipeData(GetSpellInfo(51302))
			addon:AddRecipeData(GetSpellInfo(32606))
			addon:AddRecipeData(GetSpellInfo(51309))
			addon:AddRecipeData(GetSpellInfo(51311))
			addon:AddRecipeData(GetSpellInfo(45363))
			addon:AddRecipeData(GetSpellInfo(53428))
		end
	end
	return recipelist

end

-------------------------------------------------------------------------------
-- Creates a reverse lookup for a recipe list
-------------------------------------------------------------------------------
local CreateReverseLookup

do
	local reverse_lookup = {}

	function CreateReverseLookup(recipe_list)
		if (not recipe_list) then
			addon:Print(L["DATAMINER_NODB_ERROR"])
			return
		end

		twipe(reverse_lookup)

		for i in pairs(recipe_list) do
			--if t[recipe_list[i]["Name"]] then addon:Print("Dupe: " .. i) end
			reverse_lookup[recipe_list[i]["Name"]] = i
		end

		return reverse_lookup
	end

end

-------------------------------------------------------------------------------
-- Tooltip for data-mining.
-------------------------------------------------------------------------------
local ARLDatamineTT = CreateFrame("GameTooltip", "ARLDatamineTT", UIParent, "GameTooltipTemplate")

do
	-- Tables used in all the Scan functions within this do block. -Torhal
	local info, output = {}, {}

	--- Function to compare the skill levels of a trainers recipes with those in the ARL database.
	-- @name AckisRecipeList:ScanSkillLevelData
	-- @param autoscan True when autoscan is enabled in preferences, it will surpress output letting you know when a scan has occured.
	-- @return Does a comparison of the information in your internal ARL database, and those items which are available on the trainer.  Compares the skill levels between the two.
	function addon:ScanSkillLevelData(autoscan)
		if (IsTradeskillTrainer()) then	-- Are we at a trade skill trainer?
			local recipelist = LoadRecipe()	-- Get internal database

			if (not recipelist) then
				self:Print(L["DATAMINER_NODB_ERROR"])
				return
			end
			-- Get the initial trainer filters
			local avail = GetTrainerServiceTypeFilter("available")
			local unavail = GetTrainerServiceTypeFilter("unavailable")
			local used = GetTrainerServiceTypeFilter("used")

			-- Clear the trainer filters
			SetTrainerServiceTypeFilter("available", 1)
			SetTrainerServiceTypeFilter("unavailable", 1)
			SetTrainerServiceTypeFilter("used", 1)

			twipe(info)

			-- Get the skill levels from the trainer
			for i = 1, GetNumTrainerServices(), 1 do
				local name = GetTrainerServiceInfo(i)
				local _, skilllevel = GetTrainerServiceSkillReq(i)
				if not skilllevel then
					skilllevel = 0
				end
				info[name] = skilllevel
			end
			local entryfound = false
			twipe(output)

			for i in pairs(recipelist) do
				local i_name = recipelist[i]["Name"]
				if (info[i_name]) and (info[i_name] ~= recipelist[i]["Level"]) then
					entryfound = true
					tinsert(output, L["DATAMINER_SKILLELVEL"]:format(i_name, recipelist[i]["Level"], info[i_name]))
				end
			end
			tinsert(output, "Trainer Skill Level Scan Complete.")

			if (entryfound) then
				self:DisplayTextDump(nil, nil, tconcat(output, "\n"))
			end
			-- Reset the filters to what they were before
			SetTrainerServiceTypeFilter("available", avail or 0)
			SetTrainerServiceTypeFilter("unavailable", unavail or 0)
			SetTrainerServiceTypeFilter("used", used or 0)

		elseif (not autoscan) then
			self:Print(L["DATAMINER_SKILLLEVEL_ERROR"])
		end
	end


	local teach, noteach = {}, {}

	--- Function to compare which recipes are available from a trainer and compare with the internal ARL database.
	-- @name AckisRecipeList:ScanTrainerData
	-- @param autoscan True when autoscan is enabled in preferences, it will surpress output letting you know when a scan has occured.
	-- @return Does a comparison of the information in your internal ARL database, and those items which are available on the trainer.
	-- Compares the acquire information of the ARL database with what is available on the trainer.
	function addon:ScanTrainerData(autoscan)
		if (UnitExists("target") and (not UnitIsPlayer("target")) and (not UnitIsEnemy("player", "target"))) then	-- Make sure the target exists and is a NPC
			local targetname = UnitName("target")	-- Get its name
			local targetID = tonumber(string.sub(UnitGUID("target"),-12,-7),16)	-- Get the NPC ID

			if (IsTradeskillTrainer()) then		-- Are we at a trade skill trainer?
				local recipelist = LoadRecipe()	-- Get internal database

				if (not recipelist) then
					self:Print(L["DATAMINER_NODB_ERROR"])
					return
				end

				-- Get the initial trainer filters
				local avail = GetTrainerServiceTypeFilter("available")
				local unavail = GetTrainerServiceTypeFilter("unavailable")
				local used = GetTrainerServiceTypeFilter("used")

				-- Clear the trainer filters
				SetTrainerServiceTypeFilter("available", 1)
				SetTrainerServiceTypeFilter("unavailable", 1)
				SetTrainerServiceTypeFilter("used", 1)

				if (GetNumTrainerServices() == 0) then
					self:Print("Warning: Trainer is bugged, reporting 0 trainer items.")
				end
				twipe(info)

				-- Get all the names of recipes from the trainer
				for i = 1, GetNumTrainerServices(), 1 do
					local name = GetTrainerServiceInfo(i)
					info[name] = true
				end
				twipe(teach)
				twipe(noteach)
				twipe(output)

				-- Dump out trainer info
				tinsert(output, L["DATAMINER_TRAINER_INFO"]:format(targetname, targetID))

				local teachflag = false
				local noteachflag = false

				for i in pairs(recipelist) do
					local i_name = recipelist[i]["Name"]
					local acquire = recipelist[i]["Acquire"]
					local flags = recipelist[i]["Flags"]

					-- If the trainer teaches this recipe
					if (info[i_name]) then
						local found = false
						-- Parse acquire info
						for j in pairs(acquire) do
							if (acquire[j]["Type"] == 1) then
								if (acquire[j]["ID"] == targetID) then
									found = true
								end
							end
						end

						if (not found) then
							tinsert(teach, i)
							teachflag = true

							if (not flags[3]) then
								tinsert(output, ": Trainer flag needs to be set.")
							end
						end
						-- Trainer does not teach this recipe
					else
						local found = false
						-- Parse acquire info
						for j in pairs(acquire) do
							if (acquire[j]["Type"] == 1) then
								if (acquire[j]["ID"] == targetID) then
									found = true
								end
							end
						end
						if (found) then
							noteachflag = true
							tinsert(noteach, i)
						end
					end
				end

				if (teachflag) then
					tinsert(output, "Missing entries (need to be added):")
					tsort(teach)
					for i in ipairs(teach) do
						tinsert(output, L["DATAMINER_TRAINER_TEACH"]:format(teach[i], recipelist[teach[i]]["Name"]))
					end
				end

				if (noteachflag) then
					tinsert(output, "Extra entries (need to be removed):")
					tsort(noteach)
					for i in ipairs(noteach) do
						tinsert(output, L["DATAMINER_TRAINER_NOTTEACH"]:format(noteach[i], recipelist[noteach[i]]["Name"]))
					end
				end
				tinsert(output, "Trainer Acquire Scan Complete.")

				if ((teachflag) or (noteachflag)) then
					self:DisplayTextDump(nil, nil, tconcat(output, "\n"))
				end

				-- Reset the filters to what they were before
				SetTrainerServiceTypeFilter("available", avail or 0)
				SetTrainerServiceTypeFilter("unavailable", unavail or 0)
				SetTrainerServiceTypeFilter("used", used or 0)

			elseif (not autoscan) then
				self:Print(L["DATAMINER_SKILLLEVEL_ERROR"])
			end
		else
			if (not autoscan) then
				self:Print(L["DATAMINER_TRAINER_NOTTARGETTED"])
			end
		end
	end
end

--- Generates tradeskill links for all professions so you can scan them for completeness.
-- @name AckisRecipeList:GenerateLinks
-- @return Generates tradeskill links with all recipes.  Used for testing to see if a recipe is missing from the database or not.
function addon:GenerateLinks()
	-- This code adopted from Gnomish Yellow Pages with permission

	local guid = UnitGUID("player")
	local playerGUID = string.gsub(guid,"0x0+", "")

	-- Listing of all tradeskill professions
	local tradelist = {51304, 51300, 51313, 51306, 45363, 51311, 51302, 51309, 51296, 45542}

--[[
	local encodingLength = floor((#recipeList+5) / 6)

	local encodedString = string.rep("/",encodingLength)
]]--
	local bitmap = {}
	bitmap[45542] = "8bffAA" -- First Aid (6)
	bitmap[51296] = "2/7///7///9////7//////////g+/B" -- Cooking (30)
	bitmap[51306] = "4/////////////3nFA+///9+/P7//f//n//9dgdJgHA87/3f/TolD" -- Engineering (53)
	--bitmap[51302] = "e+//////////////v//P+f///3///7/9f9//////////f///////HQ5+////B4//+///////5///////PA/Eg//" -- LW (87)
	bitmap[51302] = string.rep("/",87)
	bitmap[51304] = "2//v//////f////3//v///////6//////////9////X" -- Alchemy (43)
	bitmap[51300] = string.rep("/",85) -- Blacksmithing (85)
	bitmap[51309] = string.rep("/",71) -- Tailoring (71)
	bitmap[51311] = string.rep("/",83) -- JC 83
	bitmap[45363] = string.rep("/",74) -- Inscription (74)
	--bitmap[51313] = "4//////////7///////////w//++/9vn7///////3P/t/n//BAB" -- Enchanting
	--bitmap[51313] = "4//////////7///////////w//++/9vn7///////3P/t/n//BAD" -- Enchanting (51)
	bitmap[51313] = string.rep("/",51) -- Enchanting (51)

	for i in pairs(tradelist) do

		local tradeName = GetSpellInfo(tradelist[i])
		local tradelink = {}
		tradelink[1] = "|cffffd000|Htrade:"
		tradelink[2] = tradelist[i]
		tradelink[3] = ":450:450:"
		tradelink[4] = playerGUID
		tradelink[5] = ":"
		tradelink[6] = bitmap[tradelist[i]]
		tradelink[7] = "|h["
		tradelink[8] = tradeName
		tradelink[9] = "]|h|r"

		if (bitmap[tradelist[i]]) then
			self:Print(tconcat(tradelink,""))
		else
			self:Print("I don't have the bitmap for " .. tradeName .. " yet.")
		end
		-- /script DEFAULT_CHAT_FRAME:AddMessage(gsub(GetTradeSkillListLink(), "\124", "\124\124"))
	end

end

-------------------------------------------------------------------------------
--- Scans the items in the specified profession
-------------------------------------------------------------------------------
do

	local ORDERED_PROFESSIONS = { 
		strlower(GetSpellInfo(51304)),	-- 1 Alchemy
		strlower(GetSpellInfo(51300)),	-- 2 Blacksmithing
		strlower(GetSpellInfo(51296)),	-- 3 Cooking
		strlower(GetSpellInfo(51313)),	-- 4 Enchanting
		strlower(GetSpellInfo(51306)),	-- 5 Engineering
		strlower(GetSpellInfo(45542)),	-- 6 First Aid
		strlower(GetSpellInfo(45363)),	-- 7 Inscription
		strlower(GetSpellInfo(51311)),	-- 8 Jewelcrafting
		strlower(GetSpellInfo(51302)),	-- 9 Leatherworking
		strlower(GetSpellInfo(53428)),	-- 10 Runeforging
		strlower(GetSpellInfo(32606)),	-- 11 Smelting
		strlower(GetSpellInfo(51309)),	-- 12 Tailoring
	}
	local recipe_list = {}

	--- Parses all recipes for a specified profession, scanning their tool tips.
	-- @name AckisRecipeList:ScanProfession
	-- @param prof_name The profession name or the spell ID of it, which you wish to scan.
	-- @return Recipes in the given profession have their tooltips scanned.
	function addon:ScanProfession(prof_name)

		if (type(prof_name) == "number") then
			prof_name = GetSpellInfo(prof_name)
		end
		
		local found = false
		prof_name = strlower(prof_name)

		for idx, name in ipairs(ORDERED_PROFESSIONS) do
			if prof_name == name then
				found = true
				break
			end
		end

		if not found then
			self:Print(L["DATAMINER_NODB_ERROR"])
			return
		end
		local master_list = LoadRecipe()
		
		if not master_list then
			self:Print(L["DATAMINER_NODB_ERROR"])
			return
		end
		twipe(recipe_list)

		for i in pairs(master_list) do
			local prof = strlower(master_list[i]["Profession"])

			if prof and prof == prof_name then
				recipe_list[i] = master_list[i]
			end
		end
		local reverse_lookup = CreateReverseLookup(recipe_list)

		ARLDatamineTT:SetOwner(WorldFrame, "ANCHOR_NONE")
		GameTooltip_SetDefaultAnchor(ARLDatamineTT, UIParent)

		-- Parse the entire recipe database
		for i in pairs(recipe_list) do
			local name = recipe_list[i]["Name"]
			local link = recipe_list[i]["RecipeLink"]

			if link then
				ARLDatamineTT:SetHyperlink(link)
				self:ScanToolTip(name, recipe_list, reverse_lookup, false, false)
				self:PrintScanResults()
			else
				self:Print("Missing RecipeLink for ID " .. i .. " - " .. name .. " (If these are DK abilities, don't worry, that's normal.")
			end
		end
		ARLDatamineTT:Hide()
	end

end	-- do

--- Scans the items on a vendor, determining which recipes are available if any and compares it with the database entries.
-- @name AckisRecipeList:ScanVendor
-- @return Obtains all the vendor information on tradeskill recipes and attempts to compare the current vendor with the internal database.
function addon:ScanVendor()
	if (UnitExists("target") and (not UnitIsPlayer("target")) and (not UnitIsEnemy("player", "target"))) then	-- Make sure the target exists and is a NPC
		local recipelist = LoadRecipe()		-- Get internal database

		if (not recipelist) then
			self:Print(L["DATAMINER_NODB_ERROR"])
			return
		end
		local reverse_lookup = CreateReverseLookup(recipelist)

		local targetname = UnitName("target")		-- Get its name
		local targetID = tonumber(string.sub(UnitGUID("target"),-12,-7),16)		-- Get the NPC ID

		ARLDatamineTT:SetOwner(WorldFrame, "ANCHOR_NONE")
		GameTooltip_SetDefaultAnchor(ARLDatamineTT, UIParent)

		-- Parse all the items on the merchant
		for i = 1, GetMerchantNumItems(), 1 do
			local name, _, _, _, numAvailable = GetMerchantItemInfo(i)
			ARLDatamineTT:SetMerchantItem(i)
			self:ScanToolTip(name, recipelist, reverse_lookup, true, false)
			self:PrintScanResults()
		end
		ARLDatamineTT:Hide()
	else
		self:Print(L["DATAMINER_VENDOR_NOTTARGETTED"])
	end

end

--- Parses all the recipes in the database, and scanning their tooltips.
-- @name AckisRecipeList:TooltipScanDatabase
-- @return Entire recipe database has its tooltips scanned.
function addon:TooltipScanDatabase()
	-- Get internal database
	local recipelist = LoadRecipe()

	if (not recipelist) then
		self:Print(L["DATAMINER_NODB_ERROR"])
		return
	end
	local reverse_lookup = CreateReverseLookup(recipelist)

	ARLDatamineTT:SetOwner(WorldFrame, "ANCHOR_NONE")
	GameTooltip_SetDefaultAnchor(ARLDatamineTT, UIParent)

	-- Parse the entire recipe database
	for i in pairs(recipelist) do

		local name = recipelist[i]["Name"]
		local link = recipelist[i]["RecipeLink"]

		if link then
			ARLDatamineTT:SetHyperlink(link)
			self:ScanToolTip(name, recipelist, reverse_lookup, false, false)
			self:PrintScanResults()
		else
			self:Print("Missing RecipeLink for ID " .. i .. " - " .. name .. " (If these are DK abilities, don't worry, that's normal.")
		end
	end
	ARLDatamineTT:Hide()
end

local recipenames = {
	-- JC
	["design: "] = true,
	-- LW or Tailoring
	["pattern: "] = true,
	-- Alchemy or Cooking
	["recipe: "] = true,
	-- BS
	["plans: "] = true,
	-- Enchanting
	["formula: "] = true,
	-- Engineering
	["schematic: "] = true,
	-- First Aid
	["manual: "] = true,

	["alchemy: "] = true,
	["blacksmithing: "] = true,
	["cooking: "] = true,
	["enchanting: "] = true,
	["engineering: "] = true,
	["first aid: "] = true,
	["inscription: "] = true,
	["jewelcrafting: "] = true,
	["leatherworking: "] = true,
	["tailoring: "] = true,
}

--- Parses a specific recipe in the database, and scanning its tooltip.
-- @name AckisRecipeList:TooltipScanRecipe
-- @param spellid The [[http://www.wowwiki.com/SpellLink Spell ID]] of the recipe being added to the database.
-- @return Recipe has its tooltips scanned.
function addon:TooltipScanRecipe(spellid)

	-- Get internal database
	local recipelist = LoadRecipe()

	if (not recipelist) then
		self:Print(L["DATAMINER_NODB_ERROR"])
		return
	end

	local reverse_lookup = CreateReverseLookup(recipelist)

	ARLDatamineTT:SetOwner(WorldFrame, "ANCHOR_NONE")
	GameTooltip_SetDefaultAnchor(ARLDatamineTT, UIParent)

	if (recipelist[spellid]) then

		local name = recipelist[spellid]["Name"]
		local link = recipelist[spellid]["RecipeLink"]

		-- If a link exists, we'll scan it.
		if (link) then
			-- Load the tooltip
			ARLDatamineTT:SetHyperlink(link)

			-- Lets check to see if it's a recipe tooltip
			local linetext = _G["ARLDatamineTTTextLeft1"]
			local text = linetext:GetText()
			local matchtext = strmatch(text, "%a+: ")

			-- Check to see if we're dealing with a recipe
			if (recipenames[matchtext]) then
				-- Scan the recipe
				self:ScanToolTip(name, recipelist, reverse_lookup, false, false)

				-- We have a reverse look-up for the item which creates the spell (aka the recipe itself)
				if (spellitem[spellid]) then
					self:Print(spellitem[spellid])
					ARLDatamineTT:SetHyperlink("item:" .. spellitem[spellid] .. ":0:0:0:0:0:0:0")
					self:ScanToolTip(name, recipelist, reverse_lookup, false, true)
				end

				self:PrintScanResults()

			end

		-- Lets hide this output for runeforging.
		elseif (recipelist[spellid]["Profession"] ~= GetSpellInfo(53428)) then
			self:Print("Missing RecipeLink for ID " .. spellid .. " - " .. name .. " (If these are DK abilities, don't worry, that's normal.")
		end

	else
		self:Print("Spell ID does not exist in the database.")
	end

	ARLDatamineTT:Hide()

end

-------------------------------------------------------------------------------
-- Tooltip-scanning code
-------------------------------------------------------------------------------
do

	local SPECIALTY_TEXT = {
		["requires spellfire tailoring"] = 26797,
		["requires mooncloth tailoring"] = 26798,
		["requires shadowweave tailoring"] = 26801,
		["dragonscale leatherworking"] = 10657,
		["elemental leatherworking"] = 10659,
		["tribal leatherworking"] = 10661,
		["gnomish engineering"] = 20219,
		["goblin engineering"] = 20222,
		["armorsmith"] = 9788,
		["master axesmith"] = 17041,
		["master hammersmith"] = 17040,
		["master swordsmith"] = 17039,
		["weaponsmith"] = 9787,
	}

	local FACTION_TEXT = {
		["thorium brotherhood"] = 98,
		["zandalar tribe"] = 100,
		["argent dawn"] = 96,
		["timbermaw hold"] = 99,
		["cenarion circle"] = 97,
		["the aldor"] = 101,
		["the consortium"] = 105,
		["the scryers"] = 110,
		["the sha'tar"] = 111,
		["the mag'har"] = 108,
		["cenarion expedition"] = 103,
		["honor hold"] = 104,
		["thrallmar"] = 104,
		["the violet eye"] = 114,
		["sporeggar"] = 113,
		["kurenai"] = 108,
		["keepers of time"] = 106,
		["the scale of the sands"] = 109,
		["lower city"] = 107,
		["ashtongue deathsworn"] = 102,
		["alliance vanguard"] = 131,
		["valiance expedition"] = 126,
		["horde expedition"] = 130,
		["the taunka"] = 128,
		["the hand of vengeance"] = 127,
		["explorers' league"] = 125,
		["the kalu'ak"] = 120,
		["shattered sun offensive"] = 112,
		["warsong offensive"] = 129,
		["kirin tor"] = 118,
		["the wyrmrest accord"] = 122,
		["knights of the ebon blade"] = 117,
		["frenzyheart tribe"] = 116,
		["the oracles"] = 121,
		["argent crusade"] = 115,
		["the sons of hodir"] = 119,
	}

	local FACTION_LEVELS = {
		["neutral"] = 0,
		["friendly"] = 1,
		["honored"] = 2,
		["revered"] = 3,
		["exalted"] = 4,
	}

	local CLASS_TYPES = {
		["Deathknight"]	= 21,	["Druid"]	= 22,	["Hunter"]	= 23,
		["Mage"]	= 24,	["Paladin"]	= 25,	["Priest"]	= 26,
		["Shaman"]	= 27,	["Rogue"]	= 28,	["Warlock"]	= 29,
		["Warrior"]	= 30,
	}

	local ORDERED_CLASS_TYPES = {
		[1]	= "Deathknight",	[2]	= "Druid",	[3]	= "Hunter",
		[4]	= "Mage",		[5]	= "Paladin",	[6]	= "Priest",
		[7]	= "Shaman",		[8]	= "Rogue",	[9]	= "Warlock",
		[10]	= "Warrior",
	}

	local ROLE_TYPES = {
		["dps"]		= 51,	["tank"]	= 52,	["healer"]	= 53,
		["caster"]	= 54,	["RESERVED1"]	= 55,
	}

	local ORDERED_ROLE_TYPES = {
		[1]	= "dps",	[2]	= "tank",	[3]	= "healer",
		[4]	= "caster",	[5]	= "RESERVED1",
	}

	local ITEM_TYPES = {
		-- Armor types
		["Cloth"]	= 56,	["Leather"]	= 57,	["Mail"]	= 58,
		["Plate"]	= 59,	["Cloak"]	= 60,	["Trinket"]	= 61,
		["Ring"]	= 62,	["Necklace"]	= 63,	["Shield"]	= 64,
		["RESERVED2"]	= 65,

		-- Weapon types
		["OneHanded"]	= 66,	["TwoHanded"]	= 67,	["Axe"]		= 68,
		["Sword"]	= 69,	["Mace"]	= 70,	["Polearm"]	= 71,
		["Dagger"]	= 72,	["Staff"]	= 73,	["Wand"]	= 74,
		["Thrown"]	= 75,	["Bow"]		= 76,	["CrossBow"]	= 77,
		["Ammo"]	= 78,	["Fist"]	= 79,	["Gun"]		= 80,
	}

	local ORDERED_ITEM_TYPES = {
		-- Armor types
		[1]	= "Cloth",	[2]	= "Leather",	[3]	= "Mail",
		[4]	= "Plate",	[5]	= "Cloak",	[6]	= "Trinket",
		[7]	= "Ring",	[8]	= "Necklace",	[9]	= "Shield",
		[10]	= "RESERVED2",

		-- Weapon types
		[11]	= "OneHanded",	[12]	= "TwoHanded",	[13]	= "Axe",
		[14]	= "Sword",	[15]	= "Mace",	[16]	= "Polearm",
		[17]	= "Dagger",	[18]	= "Staff",	[19]	= "Wand",
		[20]	= "Thrown",	[21]	= "Bow",	[22]	= "CrossBow",
		[23]	= "Ammo",	[24]	= "Fist",	[25]	= "Gun",
	}

	-- Table to store scanned information. Wiped and re-used every scan.
	local scan_data = {}

	--- Parses the mining tooltip for certain keywords, comparing them with the database flags.
	-- @name AckisRecipeList:ScanToolTip
	-- @param name The name of the recipe
	-- @param recipe_list Recipe database
	-- @param reverse_lookup Reverse lookup database
	-- @param is_vendor Boolean to indicate if we're scanning a vendor.
	-- @param is_item Boolean to indicate if we're scanning an item tooltip.
	-- @return Scans a tooltip, and outputs the missing or extra filter flags.
	function addon:ScanToolTip(name, recipe_list, reverse_lookup, is_vendor, is_item)

		local matchtext

		-- We only want to wipe the table if we're scanning a net new entry (not an item associated with a spell ID)
		if (not is_item) then
			twipe(scan_data)
		end

		scan_data.match_name = name
		scan_data.recipe_list = recipe_list
		scan_data.reverse_lookup = reverse_lookup

		local num_lines = ARLDatamineTT:NumLines()

		-- Parse all the lines of the tooltip
		for i = 1, ARLDatamineTT:NumLines(), 1 do
			local text_l = _G["ARLDatamineTTTextLeft" .. i]:GetText()
			local text_r = _G["ARLDatamineTTTextRight" .. i]:GetText()
			local text
 
			if text_r then
				text = text_l .. " " .. text_r
			else
				text = text_l
			end

			local text = strlower(text)

			-- Check for recipe/item binding
			-- The recipe binding is within the first few lines of the tooltip always
			if ((strmatch(text, "binds when picked up")) and (i < 4)) then
				scan_data.boprecipe = true
			elseif ((strmatch(text, "binds when picked up")) and (i > 3)) then
				scan_data.bopitem = true
			end

			-- Recipe Specialities
			if SPECIALTY_TEXT[text] then
				scan_data.specialty = SPECIALTY_TEXT[text]
			end

			-- Recipe Reputatons
			if (strmatch(text, "Requires (.+) %- (.+)")) then
				local rep,replevel = strmatch(text, "Requires (.+) %- (.+)")
				if (FACTION_TEXT[rep]) then
					scan_data.repid = FACTION_TEXT[rep]
					scan_data.repidlevel = FACTION_LEVELS[replevel]
				end
			end

			-- Certain stats can be considered for a specific role (aka spell hit == caster dps).
			if (strmatch(text, "strength")) then
				scan_data.tank = true
				scan_data.dps = true
			elseif (strmatch(text, "agility")) then
				scan_data.tank = true
				scan_data.dps = true
			elseif (strmatch(text, "spirit")) then
				scan_data.caster = true
				scan_data.healer = true
			elseif (strmatch(text, "spell power")) then
				scan_data.caster = true
				scan_data.healer = true
			elseif (strmatch(text, "spell crit")) then
				scan_data.caster = true
				scan_data.healer = true
				-- scan_data.dps scan_data.caster Stats
			elseif (strmatch(text, "spell hit")) then
				scan_data.caster = true
			elseif (strmatch(text, "spell penetration")) then
				scan_data.caster = true
				-- scan_data.healer Stats
			elseif (strmatch(text, "mana every 5 seconds")) then
				scan_data.healer = true
				-- Melee scan_data.dps Stats
			elseif (strmatch(text, "attack power")) then
				scan_data.dps = true
			elseif (strmatch(text, "expertise")) then
				scan_data.dps = true
			elseif (strmatch(text, "melee crit")) then
				scan_data.dps = true
			elseif (strmatch(text, "ranged crit")) then
				scan_data.dps = true
			elseif (strmatch(text, "melee haste")) then
				scan_data.dps = true
			elseif (strmatch(text, "ranged haste")) then
				scan_data.dps = true
			elseif (strmatch(text, "melee hit")) then
				scan_data.dps = true
			elseif (strmatch(text, "ranged hit")) then
				scan_data.dps = true
			elseif (strmatch(text, "armor pen")) then
				scan_data.dps = true
			elseif (strmatch(text, "feral attack")) then
				scan_data.tank = true
				scan_data.dps = true
			elseif (strmatch(text, "defense")) then
				scan_data.tank = true
			elseif (strmatch(text, "block")) then
				scan_data.tank = true
			elseif (strmatch(text, "parry")) then
				scan_data.tank = true
			elseif (strmatch(text, "dodge")) then
				scan_data.tank = true
			end

			-- Classes
			if (strmatch(text, "death knight")) then
				scan_data.Deathknight = true
				scan_data.found_class = true
			elseif (strmatch(text, "druid")) then
				scan_data.Druid = true
				scan_data.found_class = true
			elseif (strmatch(text, "hunter")) then
				scan_data.Hunter = true
				scan_data.found_class = true
			elseif (strmatch(text, "mage")) then
				scan_data.Mage = true
				scan_data.found_class = true
			elseif (strmatch(text, "paladin")) then
				scan_data.Paladin = true
				scan_data.found_class = true
			elseif (strmatch(text, "priest")) then
				scan_data.Priest = true
				scan_data.found_class = true
			elseif (strmatch(text, "rogue")) then
				scan_data.Rogue = true
				scan_data.found_class = true
			elseif (strmatch(text, "shaman")) then
				scan_data.Shaman = true
				scan_data.found_class = true
			elseif (strmatch(text, "warlock")) then
				scan_data.Warlock = true
				scan_data.found_class = true
			elseif (strmatch(text, "warrior")) then
				scan_data.Warrior = true
				scan_data.found_class = true
				-- Armor types
			elseif (strmatch(text, "cloth")) then
				scan_data.Cloth = true
			elseif (strmatch(text, "leather")) then
				scan_data.Leather = true
			elseif (strmatch(text, "mail")) then
				scan_data.Mail = true
			elseif (strmatch(text, "plate")) then
				scan_data.Plate = true
			elseif (strmatch(text, "cloak")) then
				scan_data.Cloak = true
			elseif (strmatch(text, "ring")) then
				scan_data.Ring = true
			elseif (strmatch(text, "necklace")) then
				scan_data.Necklace = true
			elseif (strmatch(text, "shield")) then
				scan_data.Shield = true
				-- Weapon types
			elseif (strmatch(text, "1 hand")) or (strmatch(text, "off hand")) then
				scan_data.OneHanded = true
			elseif (strmatch(text, "2 hand")) then
				scan_data.TwoHanded = true
			elseif (strmatch(text, "axe")) then
				scan_data.Axe = true
			elseif (strmatch(text, "sword")) then
				scan_data.Sword = true
			elseif (strmatch(text, "mace")) then
				scan_data.Mace = true
			elseif (strmatch(text, "polearm")) then
				scan_data.Polearm = true
			elseif (strmatch(text, "dagger")) then
				scan_data.Dagger = true
			elseif (strmatch(text, "staff")) then
				scan_data.Staff = true
			elseif (strmatch(text, "wand")) then
				scan_data.Wand = true
			elseif (strmatch(text, "thrown")) then
				scan_data.Thrown = true
			elseif (strmatch(text, "bow")) then
				scan_data.Bow = true
			elseif (strmatch(text, "crossbow")) then
				scan_data.CrossBow = true
			elseif (strmatch(text, "gun")) then
				scan_data.Gun = true
			elseif (strmatch(text, "ammo")) then
				scan_data.Ammo = true
			elseif (strmatch(text, "fist")) then
				scan_data.Fist = true
			end
		end	-- for
		
	end

	-- Flag data for printing. Wiped and re-used.
	local missing_flags = {}
	local extra_flags = {}

	--- Prints out the results of the tooltip scan.
	-- @name AckisRecipeList:PrintScanResults
	function addon:PrintScanResults()

		-- Parse the recipe database until we get a match on the name
		local recipe_name = gsub(scan_data.match_name, "%a+%?: ", "")
		local spellid = scan_data.reverse_lookup[recipe_name]

		if (not spellid) then
			self:Print("Recipe "..recipe_name.." has no reverse lookup")
		end

		local flags = scan_data.recipe_list[spellid]["Flags"]
		twipe(missing_flags)
		twipe(extra_flags)

		if scan_data.specialty then
			self:Print(GetSpellInfo(scan_data.specialty))
		end

		if scan_data.is_vendor then
			-- Vendor Flag
			if (not flags[4]) then
				tinsert(missing_flags, "4 (Vendor)")
			end
			-- PVP Flag
			if (((GetSubZoneText() == "Wintergrasp Fortress") or (GetSubZoneText() == "Wintergrasp Fortress")) and (not flags[9])) then
				tinsert(missing_flags, "9 (PvP)")
			elseif (flags[9]) then
				tinsert(extra_flags, "9 (PvP)")
			end
		end

		if (flags[3]) then
			scan_data.boprecipe = true
		end

		-- If we've picked up at least one class flag
		if scan_data.found_class then
			for k, v in ipairs(ORDERED_CLASS_TYPES) do
				if scan_data[v] and not flags[CLASS_TYPES[v]] then
					tinsert(missing_flags, tostring(CLASS_TYPES[v]).." ("..v..")")
				elseif not scan_data[v] and flags[CLASS_TYPES[v]] then
					tinsert(extra_flags, tostring(CLASS_TYPES[v]).." ("..v..")")
				end
			end
		else	-- Recipe is not class specific
			for k, v in ipairs(ORDERED_CLASS_TYPES) do
				if flags[CLASS_TYPES[v]] then
					tinsert(extra_flags, tostring(CLASS_TYPES[v]).." ("..v..")")
				end
			end
		end

		-- BoP Item
		if (scan_data.bopitem) and (not flags[37]) then
			tinsert(missing_flags, "37")
			-- If it's a BoP item and flags BoE is set, mark it as extra
			if (flags[36]) then
				tinsert(extra_flags, "36")
			end

			-- If it's a BoP item and flags BoA is set, mark it as extra
			if (flags[38]) then
				tinsert(extra_flags, "38")
			end
			-- BoE Item, assuming it's not BoA
		elseif (not flags[36]) and (not scan_data.bopitem) then
			tinsert(missing_flags, "36")
			-- If it's a BoE item and flags BoP is set, mark it as extra
			if (flags[37]) then
				tinsert(extra_flags, "37")
			end

			-- If it's a BoE item and flags BoA is set, mark it as extra
			if (flags[38]) then
				tinsert(extra_flags, "38")
			end
		end

		-- BoP Recipe
		if (scan_data.boprecipe) and (not flags[41]) then
			tinsert(missing_flags, "41 (BoP Recipe)")
			-- If it's a BoP recipe and flags BoE is set, mark it as extra
			if (flags[40]) then
				tinsert(extra_flags, "40 (BoE Recipe)")
			end
			-- If it's a BoP recipe and flags BoA is set, mark it as extra

			if (flags[42]) then
				tinsert(extra_flags, "42 (BoA Recipe)")
			end
			-- Not BoP recipe, assuming it's not BoA
		elseif (not flags[40]) and (not scan_data.boprecipe) then
			tinsert(missing_flags, "40 (BoE Recipe)")
			-- If it's a BoE recipe and flags BoP is set, mark it as extra
			if (flags[41]) then
				tinsert(extra_flags, "41 (BoP Recipe)")
			end

			-- If it's a BoE recipe and flags BoA is set, mark it as extra
			if (flags[42]) then
				tinsert(extra_flags, "42 (BoA Recipe)")
			end
		end

		for k, v in ipairs(ORDERED_ROLE_TYPES) do
			if scan_data[v] and not flags[ROLE_TYPES[v]] then
				tinsert(missing_flags, tostring(ROLE_TYPES[v]).." ("..v..")")
			elseif not scan_data[v] and flags[ROLE_TYPES[v]] then
				tinsert(extra_flags, tostring(ROLE_TYPES[v]).." ("..v..")")
			end
		end

		for k, v in ipairs(ORDERED_ITEM_TYPES) do
			if scan_data[v] and not flags[ITEM_TYPES[v]] then
				tinsert(missing_flags, tostring(ITEM_TYPES[v]).." ("..v..")")
			elseif not scan_data[v] and flags[ITEM_TYPES[v]] then
				tinsert(extra_flags, tostring(ITEM_TYPES[v]).." ("..v..")")
			end
		end

		-- Reputations
		local repid = scan_data.repid

		if repid and not flags[repid] then
			tinsert(missing_flags, repid)
		end

		if (#missing_flags > 0) or (#extra_flags > 0) then
			self:Print(recipe_name .. " " .. spellid)

			if (#missing_flags > 0) then
				self:Print("Missing flags: " .. tconcat(missing_flags, ", "))
			end

			if (#extra_flags > 0) then
				self:Print("Extra flags: " .. tconcat(extra_flags, ", "))
			end

			if (not scan_data.tank) and (not scan_data.healer) and (not scan_data.caster) and (not scan_data.dps) then
				self:Print("No player role flag.")
			end

			local count = 0

			for k, v in ipairs(ORDERED_ITEM_TYPES) do
				if scan_data[v] then
					count = count + 1
				end
			end

			if count == 0 then
				self:Print("Missing: item type flag")
			elseif count > 1 then
				self:Print("Extra: item type flag")
			end
		end

	end

end
